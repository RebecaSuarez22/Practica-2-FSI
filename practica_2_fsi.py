# -*- coding: utf-8 -*-
"""Practica 2 FSI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1arO0JTtqGucMwYyPWkm5vBKTz_uzBgRN

Practica 2
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
from keras.callbacks import EarlyStopping
import keras
from time import time
from matplotlib import pyplot as plt 
import numpy as np
from sklearn.metrics import classification_report, confusion_matrix

batch_size = 8

train_data_dir = '/content/drive/MyDrive/Radiography_Dataset/training'
validation_data_dir = '/content/drive/MyDrive/Radiography_Dataset/validator'

train_datagen = ImageDataGenerator(
        rescale=1./255,
        rotation_range=15,
        zoom_range=0.1
)

validation_datagen = ImageDataGenerator(
        rescale=1./255
)

train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(299, 299),
        batch_size=batch_size,
        class_mode='categorical')

validation_generator = validation_datagen.flow_from_directory(
        validation_data_dir,
        target_size=(299, 299),
        batch_size=batch_size,
        class_mode='categorical')

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=(299, 299, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(264, activation='relu'))

model.add(Dropout(0.5))
model.add(Dense(4, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])

epochs = 100

es = EarlyStopping(monitor='val_accuracy', mode='max', verbose=1, patience=4, restore_best_weights=True)

history = model.fit(
        train_generator,
        epochs=epochs,
        validation_data = validation_generator,
        callbacks = [es]
)

plt.plot(history.history['loss'], label='Loss')
plt.plot(history.history['accuracy'], label='accuracy')

plt.title('Entrenamiento Radiografía ')
plt.xlabel('Épocas')
plt.legend(loc="upper left")

plt.show()

plt.plot(history.history['val_loss'], label='Val_Loss')
plt.plot(history.history['val_accuracy'], label='val_accuracy')

plt.title('Entrenamiento Radiografía')
plt.xlabel('Épocas')
plt.legend(loc="upper left")

plt.show()

Y_pred = model.predict_generator(validation_generator, 200 // batch_size+1)
y_pred = np.argmax(Y_pred, axis=1)
print('Confusion Matrix')
print(confusion_matrix(validation_generator.classes, y_pred))
print('Classification Report')
target_names = ['Covid', 'Oscuro', 'Normal', 'Neumonia']
print(classification_report(validation_generator.classes, y_pred, target_names=target_names))

model.save("mimodelo.h5")